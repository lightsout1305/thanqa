1.	Изучить требования (функциональные и нефункциональные – виды тестирования объектов, прямые и косвенные)
a.	Их характеристики:
i.	Завершенность
ii.	Непротиворечивость
iii.	Корректность
iv.	Недвусмысленность
v.	Проверяемость
vi.	Атомарность
vii.	Выполнимость
viii.	Обязательность
2.	Разработать план
a.	Мастер-план
i.	Требования к заводимым дефектам
ii.	Условия принятия сборки (например, только на Windows)
iii.	Критерии принятия продукта к релизу (например, каждое требование должно быть покрыто n тестами)
iv.	Инструменты
b.	План (что надо тестировать, что будем тестировать, как будем тестировать, когда будем это делать, критерии приема и сдачи)
i.	Перечень работ (области, которые будут протестированы)
ii.	Критерии качества и оценки (работы тестировщика)
iii.	Оценка рисков (связанные с работой)
iv.	Документация (что буду использовать – тест-кейсы, чеклисты и т.д.)
v.	Тестовая стратегия (методы, уровни, виды тестирования, регрессионное тестирование, метрики по передаче тест-кейсов в регресс)
vi.	Ресурсы (человеческие, аппаратные, программные)
vii.	Расписание (сроки выполнения работ)
c.	Приемо-сдаточный план (установленный набор проверок перед релизом)

Принципы тестирования:
	Тестирование показывает наличие дефектов
	Исчерпывающее тестирование невозможно
	Раннее тестирование
	Скопление дефектов
	Парадокс пестицида
	Тестирование зависит от контекста
	Заблуждение об отсутствии дефектов

Виды тестирования:
1.	Функциональное (проверить функции и программы на ожидаемый результат)
a.	Функциональное тестирование
b.	Тестирование элемента интерфейса
c.	Безопасность (если продукт ориентирован)
2.	Нефункциональное
a.	Безопасность
b.	Тестирование интерфейса
c.	Удобство пользования
d.	Локализация
e.	Интернационализация
f.	Конфигурационное
i.	Кроссплатформенное
ii.	Кроссбраузерное
g.	Совместимости
h.	Инсталляционное
i.	Производительности
j.	Тестирование на отказ и восстановление
k.	Тестирование документации
l.	Тестирование стабильности
m.	Объемное тестирование
n.	Тестирование доступности
Функциональное тестирование:
1.	Требования
2.	Входные данные
3.	Выходные данные
4.	Прохождение сценариев
5.	Сравнение результатов
Нужно понимать, какой функционал реализован и правильно ли он работает.

Виды тестирования, связанные с изменениями:
1.	Дымовое, смок-тесты (проверить критически важный функционал)
2.	Регрессионное (проверить старый функционал после новых доработок)
a.	Проводится в каждом билде
b.	Проверка исправленных багов
c.	Проверка связанных функциональностей
d.	Проводится несколько раз
e.	Часто автоматизируют
f.	Выбор тестов для регрессии:
i.	Безопасность, критичные функции для бизнеса
ii.	Часто меняющиеся области
iii.	Тесты функций с высокой вероятностью ошибки
3.	Тестирование сборки (тестирование конкретной версии продукта)
4.	Санитарное (тестирование небольшого участка продукта)
5.	Ретест (повторное тестирование после исправления)
6.	New feature test

Уровни тестирования:
1.	Модульное (юнит-тесты – проверка отдельной части программы)
2.	Интеграционное (взаимосвязанные модули)
a.	Тестирование интеграции компонентов
b.	Системное интеграционное тестирование
i.	API
ii.	CLI
iii.	GUI
3.	Системное (тестирование всех компонентов продукта)
4.	Приемочное (тестирование критически важных аспектов программы для заказчика)
a.	Пользовательское приемочное тестирование (UAT)
b.	Эксплуатационное
c.	На соответствие контракту
d.	Альфа
e.	Бета

Методы тестирования (насколько глубоко можно погрузиться в тех. часть проекта):
1.	Черный ящик (нет информации о технической части)
2.	Белый ящик (погружение в тех. часть)
3.	Серый ящик (нечто среднее – есть доступ туда, куда не может попасть пользователь)

Направление тестирования:
1.	Статическое (не запускаем код, работа над предотвращением дефектов)
a.	Тестирование требований
b.	Обзор архитектуры проекта (по документации)
c.	Проверка макета
d.	Проверка БД
e.	Проверка семантики кода (с помощью сервиса или утилиты)
f.	Проверка документации
g.	Подготовка тестовых данных
2.	Динамическое (запускаем код, поиск дефектов)
a.	Проводить основные тесты (функциональные)
По степени удаленности:
1.	Альфа-тестирование (сырой продукт)
2.	Бета-тестирование (альфа пройдена, дается доступ аудитории, срок 1-2 недели)
По ожидаемому поведению:
1.	Позитивное тестирование (стандартные ситуации)
2.	Негативное тестирование (нестандартные ситуации)

Верификация – проверка, верно ли все работает
1.	Статическая проверка
2.	Делаем ли мы продукт правильно?
3.	До валидации
Валидация – проверка итогового результата (получился ли продукт таким, каким хотели)
1.	Динамический процесс
2.	Делаем ли мы правильный продукт?
3.	После верификации
Модели разработки ПО (SLDC):
1.	Водопадная (waterfall) – используется в проектах с четко определенными требованиями, без изменений в процессе разработки, кроссплатформенность, без тестирования
a.	Плюсы:
i.	Полное документирование
ii.	Четкое планирование
iii.	Прозрачность
b.	Минусы:
i.	Утверждение полного объема работ на первом этапе
ii.	В случае изменения требования – начать работу заново
iii.	Увеличение затрат при изменении требований
2.	V-модель – в проектах с временными и финансовыми ограничениями и с более широким тестовым покрытием
a.	Плюсы:
i.	Строгие этапы
ii.	Раннее тестирование
iii.	Промежуточное тестирование
b.	Минусы:
i.	Негибкость модели
ii.	Написание кода только в середине процесса
iii.	Нет динамического внесения изменений
3.	Итерационная – для крупных проектов, не все требования известны, они будут меняться:
a.	Плюсы:
i.	Раннее создание ПО
ii.	Гибкость
iii.	Проще тестирование и анализ рисков
b.	Минусы:
i.	Каждая фаза самостоятельна
ii.	Не все требования известны

Артефакт – любой документ, который я завожу
Артефакты тестирования для определения проводимых проверок:
1.	Чеклисты – список проверок без указания шагов
2.	Тестовый набор – перечень тест-кейсов
Тест-кейс – проверка, состоящая из шагов, условий и ожидаемого результата
Чеклист – идея проверки
Чеклист:
1.	Атрибуты
a.	Номер
b.	Описание проверки
c.	Статус
i.	Passed
ii.	Failed
iii.	Skipped
iv.	No run
v.	Blocked
d.	Комментарий
Тест-кейс – проверка идеи с подробным описанием проходимых шагов
Тест-кейс:
1.	Атрибуты:
a.	Номер кейса
b.	Заголовок
c.	Предусловия (состояние системы и/или продукта перед тестированием)
d.	Шаги проверки
e.	Ожидаемый результат
f.	Статус
i.	Passed
ii.	Failed
iii.	Skipped
iv.	No run
v.	Blocked
g.	Модуль
h.	Приоритет
i.	Связанное требование

Правила тест-кейса:
1.	Независимость
2.	Однозначность
3.	Полнота
4.	Обезличенность
5.	Упрощенность
6.	1 тест-кейс = 1 цель
Тест-кейсы:
1.	Высокоуровневый (похож на чеклист)
2.	Низкоуровневый (каждый шаг подробно расписан)

Техники тест-дизайна:
1.  Классы эквивалентности (делить значения на классы, дающие одинаковый результат при тестировании, должен быть 1 тест для 1 класса)
2.  Граничные значения (проверка границ диапазонов значений, проведение 3 тестов: на самой границе, граница + 1, граница - 1)
3.  Таблица принятия решений
4.  Сценарная (моделирование поведения пользователя)
5.  ADHOC (вольное тестирование)
6.  Предугадывание ошибок
7.  Попарное тестирование (перебор значений чекбоксов, проверка уникальных полей, лучше использовать готовые инструменты)
8.  Доменный анализ
9.  Причина-следствие
10.  Состояние и переходы

Дефекты, баги:
1.	Выявить
2.	Локализовать
a.	Откуда приходит запрос на сервер в неверном формате
b.	Исследовать окружение (разные браузеры)
c.	Проверить на разных устройствах
d.	Проверить на разных версиях ПО
e.	Проанализировать возможность влияния найденного дефекта на другие области

Отчеты об ошибках (багах)
1.	Основные
a.	Идентификатор
b.	Заголовок
i.	Что произошло?
ii.	Где произошло?
iii.	При каких условиях?
c.	Шаги воспроизведения
i.	Описать каждое действие в отдельном шаге
ii.	Описать безличные формулировки, призывающие к действию
iii.	Описать каждый шаг, пока не появится дефект
iv.	Найти кратчайший путь воспроизведения
v.	Найти точный путь воспроизведения
vi.	Писать так, чтобы любой новичок мог его воспроизвести
d.	Актуальный результат
e.	Ожидаемый результат
f.	Окружение
g.	Критичность (степень влияния дефекта на работу системы)
i.	Blocker
•	После этого дефекта мы не можем продолжать работать с системой в целом или конкретной функциональностью (ключевой)
•	Для продолжения тестирования необходимо исправление этого дефекта
•	Может измениться на critical, если найден обходной путь
ii.	Critical
•	Неправильно работающая ключевая бизнес-логика
•	Дыра в системе безопасности
•	Проблема приводит к временному падению сервера или приводит в нерабочее состояние часть системы
iii.	Major
•	Часть основной бизнес-логики работает некорректно
•	Есть возможность работать с тестируемым объектом, используя другие тестовые данные
•	Обычно ставится в случаях, когда функционал может работать при одних условиях, но падает при других
iv.	Minor
•	Не нарушает бизнес-логику
•	Очевидная проблема UI/UX
•	Грамматические ошибки
v.	Trivial
•	Не затрагивает функциональность системы
•	Приводит к ошибкам в сторонних программах, но не в основной
•	Опечатки, пропуски пробела
•	Незначительные отклонения верстки
h.	Приоритет
i.	High (01) – ошибка должна быть исправлена как можно быстрее, т.к. ее наличие является критической для проекта
ii.	Normal (02) – ошибка должна быть исправлена, ее наличие не является критичной, но требует обязательного решения
iii.	Low (03) – ошибка должна быть исправлена, ее наличие не является критичной, не требует срочного решения
2.	Дополнительные
a.	Приложения-скриншоты, видео
b.	Возможность обойти баг
c.	Воспроизводимость
d.	Комментарии

 Советы:
1.	Упрощать шаги – чем длиннее шаг, тем хуже
2.	Проверить на дубликаты
3.	1 отчет для 1 дефекта
4.	Репорт должен быть очевидным и понятным
5.	Репорт должен быть грамотно написан
6.	Не делать репорт, если он уже написан
Основные ошибки:
1.	Недостаточно предоставленных данных для воспроизведения бага или баг воспроизводится только при конкретных обстоятельствах, но они не указаны
2.	Название репорта и ожидаемый результат не соответствуют друг другу
3.	Завышение/занижение критичности
4.	Неверное употребление терминологии
5.	Сложные речевые обороты
6.	Отсутствует ожидаемый результат
7.	Критика программиста
Цель отчета – предоставить заинтересованным в проекте лицам текущую информацию о его состоянии. Нужны только цифры и факты.
Отчет о тестировании:
•	Команда тестировщиков (все, кто задействован в тестировании)
•	Описание процесса тестирования
o	Краткое описание того, как проходило тестирование: методы, техники, инструментальные средства и т.д.
•	Краткое описание
o	Краткое описание того, какие билды были протестированы, есть ли в качестве приложения прогресс или регресс, есть ли какие-либо проблемы, требующие внимания руководства
o	Краткое описание – важная часть отчета, т.к. менеджеру проекта приходится просматривать огромное количество документации, и он часто принимает решение о необходимости более детального изучения отчета как раз на основе краткого описания
•	Расписание
o	Детализированное описание того, какая работа и на протяжении какого времени выполнялась каждым тестировщиком
•	Рекомендации
o	Важные моменты, на которые следует обратить внимание руководству. Также можно дать рекомендацию на передачу проекта заказчику («передачу в продакшн»)
•	Статистика по ошибкам
•	Список новых ошибок
o	Список ошибок, обнаруженных командой тестировщиков за подотчетный период
•	Статистика по всем ошибкам

Баг-репорт:
•	Описание
o	Шаги воспроизведения
o	Фактический результат
o	Ожидаемый результат (нужна ссылка)
•	Проект
•	Компонент
•	Версия билда
•	Серьезность
•	Приоритет
•	Статус
•	Автор
•	Назначение
•	Окружение
o	Dev
o	Stage
o	Prod
•	Прикрепляемый файл

Тестирование веб-сервисов:
План работы:
1.	Изучить требования
2.	Написать тест-кейсы
3.	Тестировать
Требования/входные данные:
1.	Какие параметры/атрибуты есть у веб-сервиса
2.	Образцы запросов (у разработчика)

Какие тест-кейсы?
1.	Smoke (один запрос на метод)
2.	Critical path (все валидные) - основной тип тестовых испытаний, во время которого значимые элементы и функции приложения проверяются на предмет правильности работы при стандартном их использовании. Чаще всего на практике, на данном уровне тестирования проверяется основная масса требований к продукту. Пример: выбор шрифта, возможность набора текста, вставки картинок и т.д.
3.	Extended (все невалидные) - тестирование, при котором проверяется нестандартное использование программного продукта, границы переполнения массивов данных, ввод специальных символов, нелогичное кликанье по кнопкам, открыть одно окно и закрыть предыдущее, и так далее.
Специфические тесты:
1.	Пустые элементы
2.	Комментарии
3.	Валидность ответов согласно схеме (при наличии)
4.	Проверки с обязательными и необязательными атрибутами
5.	Проверки с дополнительными и недопустимыми значениями
6.	Различные типы данных (строки, числа)
7.	Дубликаты атрибутов/элементов
8.	Порядок атрибутов/элементов

Тестирование мобильных приложений:
1.	Статистика
a.	Выбор платформы и версии/ОС
b.	Выбор устройства
c.	Выбор форм-фактора
2.	Типы мобильных приложений
a.	Нативные
i.	Плюсы
1.	Работа без интернета
2.	Доступ к возможностям мобильного устройства
3.	Распространение через магазины
4.	Высокая скорость работы
ii.	Минусы
1.	Разработка отдельной версии для каждой платформы
2.	Больше денег и меньше времени для разработки
3.	Загрузка и обновление с привлечением юзера
b.	Гибридные
i.	Плюсы
1.	Кросс-платформенное
2.	Для написания используются веб-технологии
3.	Может использовать функции телефона
4.	Дешевле в разработке, чем нативные
ii.	Минусы
1.	Низкая скорость работы
2.	Непрактичны в виду долгого обновления фреймворка
3.	Незащищенность
c.	Веб
i.	Плюсы
1.	Одна версия для всех платформ
2.	Обновление на сервере
ii.	Минусы
1.	Необходимо интернет-соединение для работы
2.	Нет возможности использовать функции мобильного устройства
3.	Нельзя загрузить из магазина
3.	Гайдлайны
4.	Где взять устройство для тестирования?

Анализ требований:
1.	Уровень бизнес-требований – цель, ради которой создается продукт (ради чего, какая польза, как получим прибыль)
2.	Уровень пользовательских требований – задачи, которые пользователь может выполнять с помощью продукта
3.	Уровень требований продукта – как все будет реализовано
a.	Функциональные (что система должна делать)
b.	Нефункциональные (как система должна делать)
Пути выявления требований:
1.	Интервью
2.	Наблюдение
3.	Самостоятельное описание
4.	Прототипирование

Свойства требований:
•	Завершенность
•	Непротиворечивость
•	Корректность
•	Недвусмысленность
•	Проверяемость
•	Атомарность
•	Выполнимость
•	Обязательность
•	Модифицируемость
•	Прослеживаемость
Как упростить работу с требованиями?
1.	Написать тест-кейсы
2.	Задать вопросы
3.	Нарисовать схему
a.	Интеллект-карты
b.	Use-cases – действия пользователя и реакция системы на них
4.	Рецензирование

Способы представления:
1.	Use-cases
2.	User story
3.	UI mockup
4.	Спецификации

Оценка трудозатрат:
Цели:
1.	Определение сроков
2.	Оплата
a.	Fixed price
b.	Time & material
3.	Оптимизация работы (после окончания итерации)
4.	И т.д.

Методы:
1.	Декомпозиция + by Test Cases
a.	Декомпозиция – требование => проверка => количество (тест-кейсов - 30)
b.	Средние затраты на 1 тест-кейс + на все тест-кейсы
i.	Написание 1 кейса – например, 10 мин
ii.	Время на его выполнение – например, 10 мин
iii.	Умножение на общее количество тестов = 30 кейсов * 20
c.	Определение количества возможных дефектов и работу над одним дефектом
i.	Сколько дефектов можно найти в той или иной функциональности => предположение – 30/5 = 6
ii.	Время оформления 1 баг-репорта => аналогично 1 тест-кейсу – 6*10 = 60 мин
iii.	Время на ретест (50% на первый ретест, 50% на второй ретест) – 6 * 2 * 10 = 120 мин
d.	Риски + дополнительное время
i.	Коммуникация
ii.	Изменение тест—кейсов
iii.	Подготовка сборки/билдов
iv.	Чаще всего это 30% от предыдущего времени
e.	Сумма
i.	Тест-кейсы (написание + выполнение) – 600 мин
ii.	Дефекты (оформление + ретест) – 120 мин
iii.	Риски 30% - 780 * 0.3 = 234 мин
iv.	Итого = 600 + 180 + 234 – 1014 мин (16,9 ч)
2.	Based on Development – умножаем количество времени на разработку либо на 30% (если 3 тестировщика), либо на 50 (если 2 тестировщика)
3.	По трем точкам (1 точка – самый лучший вариант, где тестировщики укладываются в сроки, 2 – есть риски, на работу тестировщиков требуется доп. время, 3 – кто-то заболел из тестировщиков)
a.	(O +4M + P)/6
i.	Optimistic
ii.	Pessimistic
iii.	Middle
b.	(13 + 4 * 17 + 20)/6 = 16,8 ч
c.	Стандартное отклонение – (P – O)/6 = (20 – 13)/6 = 1.2ч
d.	16,8 +- 1,2 ч
4.	На основе опыта
5.	Пальцем в небо
6.	Метод процентного распределения (определенный процент времени на идею, сбор и анализ требований, разработку, тестирование, ввод в эксплуатацию)


Тест-стратегия:
Виды:
1.	Документ
2.	Часть тест-плана
Этапы:
1.	Сбор информации (общение с заказчиком, PM, бизнес-аналитиком)
2.	Анализ информации (наиболее важные и основные вещи для тестирования)
3.	Принятие решений (какие виды тестирования использовать)
4.	Презентация
Кто составляет:
1.	Менеджер
2.	Рядовой тестировщик (Middle+)
Что включает:
1.	Цель тестирования
2.	Информация о продукте
3.	Виды тестирования
4.	Критерии начала и окончания тестирования

Тест-план:
Кто составляет:
1.	Менеджер
2.	Рядовой тестировщик (Middle+)

Виды:
1.	Мастер (для всех команд на одном проекте)
2.	Детальный (для каждой команды, итерации, релиза)
3.	План приемочных испытаний (для заказчика)

Структура:
1.	Виды тестирования
2.	Приоритет тестирования
3.	Стратегия тестирования
4.	Окружение
5.	Задачи тестировщиков
6.	Тестовая документация
7.	Техники тест-дизайна
8.	Баг-трекинг
9.	Критерии начала и окончания тестирования
10.	Инструменты для работы
11.	Оценки качества и метрики

Отчет о тестировании:
Типы:
1.	Промежуточный
a.	Дневной
b.	Недельный
c.	Месячный
d.	Версионный (отчет по итерации)
2.	Финальный

Части отчета:
1.	Состав команды
2.	Сроки
3.	Описание процессов тестирования
4.	Дополнение к тестовым кейсам
5.	Процент пройденных кейсов
6.	Критичные баги
7.	Результаты регрессионного тестирования
8.	Планы (только для промежуточных)
Agile/Scrum
Agile-манифест
1.	Люди и взаимодействие важнее процессов и инструментов
2.	Работающий продукт важнее исчерпывающей документации
3.	Сотрудничество с заказчиком важнее согласования условий контракта
4.	Готовность к изменениям важнее следования первоначальному плану

Scrum – фреймворк:
1.	Scrum-команда
a.	Product owner
i.	Управление бэклогом продукта (набором требований для реализации)
ii.	Описание бэклога
b.	Development team
i.	Самоорганизация
ii.	Кроссфункциональность
iii.	Единственная роль – разработчик
iv.	Коллективная ответственность
c.	Scrum master
i.	Функционирование Scrum
ii.	Обучение и понимание Scrum всеми членами команды
2.	События
a.	Sprint
i.	Планирование спринта
ii.	Ежедневный Scrum
1.	Что ты делал вчера?
2.	Что ты будешь делать сегодня?
3.	Какие есть препятствия для выполнения цели?
iii.	Обзор спринта
iv.	Ретроспектива
1.	Что шло хорошо в спринте?
2.	Какие проблемы были в спринте?
3.	Как можно улучшить работу?
4.	Идеи по ходу ретроспективы
3.	Артефакты
a.	Бэклог продукта
b.	Уточнение бэклога продукта
c.	Критерии подготовленности
i.	Фокус на уровне бэклога
ii.	Помогают заказчику создавать хорошо написанные пользовательские истории, которые готовы для разработки
d.	Пользовательские истории
i.	As a [Role]
ii.	I can [Functionality]
iii.	So that [Rationale]
iv.	Acceptance criteria
e.	Покер планирования
f.	Бэклог спринта
g.	Инкремент продукта
h.	Критерии готовности
i.	Фокус на уровне спринта
ii.	Помогают проверить работу в соответствии со всеми требованиями проекта, а не только продемонстрировать, что функционал работает
4.	Метрики
a.	Скорость
b.	Емкость
c.	Диаграмма сгорания задач
d.	Накопительная диаграмма потока